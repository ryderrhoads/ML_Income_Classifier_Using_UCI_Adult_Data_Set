1+1
print("hello world")
install.packages("pacman")
pacman::p_load(ggplot2,data.table)
5*10
1+2
5*10
abs(-1)
#Data Types
num <- 0.2
num <- 10
logicnum <- T
logic <- F
String = "Story"
String1 = 'Story'
logic <- String==String1
logic2 <- String==String1
myFact=as.factor("female")
vec1=c(1,2,3,4)
vec2=c(T,F,TRUE,FALSE)
vec2=c(T,F,FALSE,TRUE,F)
vec3=c("a","b","c")
vec3=as.factor(c("a","b","c"))
vec3=c("a","b","c")
vec4=as.factor(c("a","b","c"))
vec5=c(1,TRUE,)
vec5=c(1,TRUE)
#lists
#list can contain anything including functions and dataframes
myList=list("Hi","Pr.")
#2d array
2dList=list(myList,"a")
#2d array
List_2d=list(myList,"a")
#dataframe df using pandas ! Flexing knol
data.frame(vec1,vec2)
#vectors
vec1=c(1,2,3)
#dataframe df using pandas ! Flexing knol
data.frame(vec1,vec3)
#dataframe df using pandas ! Flexing knol
data.frame(one=vec1,two=vec3)
df=data.frame(one=vec1,two=vec3)
View(df)
matrix(vec3,2,3)
myMatrix=matrix(vec3,2,3)
colnames(myMatrix`)
colnames(myMatrix)
colnames(myMatrix)
#indexing
vec2[2]
#indexing
vec2[2]
vec3[1]
1:6
nums=1:6
vec3[c(F,T,F)]
myList("a"=vec1,
"vec2"=vec2,
c=vec3,
num=20)
myList=list("a"=vec1,
"vec2"=vec2,
c=vec3,
num=20)
#indexing df
df$a
#indexing df
df$one
df[[1]]
df[[[1]]]
df[[1[1]]]
df[[1]][1]
#Functions
newSum =function(val,val1){return(val+val1)}
newSum(10,20)
newDiv =function(val,val1){return(val/val1)}
newDiv(9,3)
newDiv(val1=3,val=9)
?mean
mu_list=list(1:100)
mu_list
mean(mu_list)
?for
mean(for(x in mu))
mean(unlist(mu_list))
#packages
install.packages(GGPlot)
install.packages("ggplot2")
#packages (only need to be installed once similar to pip)
library("ggplot2")
li
#packages (only need to be installed once similar to pip)
library("ggplot2")
#packages (only need to be installed once similar to pip)
library("ggplot2")
#packages (only need to be installed once similar to pip)
library(ggplot2)
ggplot2(df,aes(x))
ggplot(df,aes(x))
ggplot(df,aes(one,two)+geom_point())
ggplot(df,aes(x=one,y=two))+geom_point()
# Convert "income" column to binary indicator
data[, income := ifelse(income == ">50K", 1, 0)]
# Convert "education" column to binary indicator
education_levels <- c("Bachelors", "Masters", "Doctorate")
#####################
# Problem 1
#####################
# Load necessary library
library(dplyr)
#################
# Question (i)
#################
# Load data
data <- read.csv("ECON_418-518_HW3_Data.csv")
getwd()
setwd("/Users/ryderrhoads/Documents/GitHub/ML_Income_Classifier_Using_UCI_Adult_Data_Set)
""
)
setwd("/Users/ryderrhoads/Documents/GitHub/ML_Income_Classifier_Using_UCI_Adult_Data_Set/")
getwd()
# Load data
data <- read.csv("ECON_418-518_HW3_Data.csv")
#####################
# Problem 1
#####################
# Load necessary library
library(dplyr)
#################
# Question (i)
#################
# Load data
data <- read.csv("ECON_418-518_HW3_Data.csv")
# Drop specified columns
cols_to_drop <- c("fnlwgt", "occupation", "relationship", "capital-gain", "capital-loss", "educational-num")
data <- data %>% select(-all_of(cols_to_drop))
library(readr)
ECON_418_518_HW3_Data <- read_csv("ECON_418-518_HW3_Data.csv")
View(ECON_418_518_HW3_Data)
View(ECON_418_518_HW3_Data)
ECON_418_518_HW3_Data.columns
names(data)
View(ECON_418_518_HW3_Data)
View(ECON_418_518_HW3_Data)
View(data)
#####################
# Problem 1
#####################
# Load necessary library
library(dplyr)
#################
# Question (i)
#################
# Load data
data <- read.csv("ECON_418-518_HW3_Data.csv")
# Drop specified columns (adjusting column names to match actual names)
cols_to_drop <- c("fnlwgt", "occupation", "relationship", "capital.gain", "capital.loss", "educational.num")
data <- data %>% select(-all_of(cols_to_drop))
#################
# Question (ii)
#################
##############
# Part (a)
##############
# Convert "income" column to binary indicator
data <- data %>%
mutate(income = ifelse(income == ">50K", 1, 0))
##############
# Part (b)
##############
# Convert "race" column to binary indicator
data <- data %>%
mutate(race = ifelse(race == "White", 1, 0))
##############
# Part (c)
##############
# Convert "gender" column to binary indicator
data <- data %>%
mutate(gender = ifelse(gender == "Male", 1, 0))
##############
# Part (d)
##############
# Convert "workclass" column to binary indicator
data <- data %>%
mutate(workclass = ifelse(workclass == "Private", 1, 0))
##############
# Part (e)
##############
# Convert "native-country" column to binary indicator
data <- data %>%
mutate(`native.country` = ifelse(`native.country` == "United-States", 1, 0))
##############
# Part (f)
##############
# Convert "marital-status" column to binary indicator
data <- data %>%
mutate(`marital.status` = ifelse(`marital.status` == "Married-civ-spouse", 1, 0))
##############
# Part (g)
##############
# Convert "education" column to binary indicator
education_levels <- c("Bachelors", "Masters", "Doctorate")
data <- data %>%
mutate(education = ifelse(education %in% education_levels, 1, 0))
##############
# Part (h)
##############
# Create an "age sq" variable
data <- data %>%
mutate(`age.sq` = age^2)
##############
# Part (i)
##############
# Standardize variables
standardize <- function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
data <- data %>%
mutate(across(c("age", "age.sq", "hours.per.week"), standardize))
#####################
# Problem 1
#####################
# Load necessary library
library(dplyr)
#################
# Question (i)
#################
# Load data
data <- read.csv("ECON_418-518_HW3_Data.csv")
# Drop specified columns (adjusting column names to match actual names)
cols_to_drop <- c("fnlwgt", "occupation", "relationship", "capital.gain", "capital.loss", "educational.num")
data <- data %>% select(-all_of(cols_to_drop))
#################
# Question (ii)
#################
##############
# Part (a)
##############
# Convert "income" column to binary indicator
data <- data %>%
mutate(income = ifelse(income == ">50K", 1, 0))
##############
# Part (b)
##############
# Convert "race" column to binary indicator
data <- data %>%
mutate(race = ifelse(race == "White", 1, 0))
##############
# Part (c)
##############
# Convert "gender" column to binary indicator
data <- data %>%
mutate(gender = ifelse(gender == "Male", 1, 0))
##############
# Part (d)
##############
# Convert "workclass" column to binary indicator
data <- data %>%
mutate(workclass = ifelse(workclass == "Private", 1, 0))
##############
# Part (e)
##############
# Convert "native-country" column to binary indicator
data <- data %>%
mutate(`native.country` = ifelse(`native.country` == "United-States", 1, 0))
##############
# Part (f)
##############
# Convert "marital-status" column to binary indicator
data <- data %>%
mutate(`marital.status` = ifelse(`marital.status` == "Married-civ-spouse", 1, 0))
##############
# Part (g)
##############
# Convert "education" column to binary indicator
education_levels <- c("Bachelors", "Masters", "Doctorate")
data <- data %>%
mutate(education = ifelse(education %in% education_levels, 1, 0))
##############
# Part (h)
##############
# Create an "age sq" variable
data <- data %>%
mutate(`age.sq` = age^2)
##############
# Part (i)
##############
standardize <- function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
data <- data %>%
mutate(across(c("age", "age.sq", "hours.per.week"), standardize))
#################
# Question (iii)
#################
##############
# Part (a)
##############
prop_income_gt_50k <- mean(data$income == 1, na.rm = TRUE)
cat("Proportion of income > $50k:", prop_income_gt_50k, "\n")
##############
# Part (b)
##############
prop_private_sector <- mean(data$workclass == 1, na.rm = TRUE)
cat("Proportion in private sector:", prop_private_sector, "\n")
##############
# Part (c)
##############
prop_married <- mean(data$`marital-status` == 1, na.rm = TRUE)
cat("Proportion married:", prop_married, "\n")
##############
# Part (d)
##############
prop_females <- mean(data$gender == 0, na.rm = TRUE)
cat("Proportion females:", prop_females, "\n")
##############
# Part (e)
##############
total_observations <- nrow(data)
total_nas <- sum(is.na(data))
cat("Total observations:", total_observations, "\n")
cat("Total NAs:", total_nas, "\n")
##############
# Part (f)
##############
data[, income := as.factor(income)]
# Convert "income" column to a factor
data$income <- as.factor(data$income)
come" column to a factor
data$income <- as.factor(data$income)
#################
# Question (iv)
#################
##############
# Part (a)
##############
#################
# Question (v)
#################
##############
# Part (b)
##############
library(caret)
lambda_grid <- 10^(seq(5, -2, length = 50))
lasso_model <- train(
income ~ .,
data = train_data,
method = "glmnet",
#####################
# Problem 1
#####################
# Load necessary library
library(dplyr)
#################
# Question (i)
#################
# Load data
data <- read.csv("ECON_418-518_HW3_Data.csv")
# Drop specified columns (adjusting column names to match actual names)
cols_to_drop <- c("fnlwgt", "occupation", "relationship", "capital.gain", "capital.loss", "educational.num")
data <- data %>% select(-all_of(cols_to_drop))
#################
# Question (ii)
#################
##############
# Part (a)
##############
# Convert "income" column to binary indicator
data <- data %>%
mutate(income = ifelse(income == ">50K", 1, 0))
##############
# Part (b)
##############
# Convert "race" column to binary indicator
data <- data %>%
mutate(race = ifelse(race == "White", 1, 0))
##############
# Part (c)
##############
# Convert "gender" column to binary indicator
data <- data %>%
mutate(gender = ifelse(gender == "Male", 1, 0))
##############
# Part (d)
##############
# Convert "workclass" column to binary indicator
data <- data %>%
mutate(workclass = ifelse(workclass == "Private", 1, 0))
##############
# Part (e)
##############
# Convert "native-country" column to binary indicator
data <- data %>%
mutate(`native.country` = ifelse(`native.country` == "United-States", 1, 0))
##############
# Part (f)
##############
# Convert "marital-status" column to binary indicator
data <- data %>%
mutate(`marital.status` = ifelse(`marital.status` == "Married-civ-spouse", 1, 0))
##############
# Part (g)
##############
# Convert "education" column to binary indicator
education_levels <- c("Bachelors", "Masters", "Doctorate")
data <- data %>%
mutate(education = ifelse(education %in% education_levels, 1, 0))
##############
# Part (h)
##############
# Create an "age sq" variable
data <- data %>%
mutate(`age.sq` = age^2)
##############
# Part (i)
##############
standardize <- function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
data <- data %>%
mutate(across(c("age", "age.sq", "hours.per.week"), standardize))
#################
# Question (iii)
#################
##############
# Part (a)
##############
prop_income_gt_50k <- mean(data$income == 1, na.rm = TRUE)
cat("Proportion of income > $50k:", prop_income_gt_50k, "\n")
##############
# Part (b)
##############
prop_private_sector <- mean(data$workclass == 1, na.rm = TRUE)
cat("Proportion in private sector:", prop_private_sector, "\n")
##############
# Part (c)
##############
prop_married <- mean(data$`marital-status` == 1, na.rm = TRUE)
cat("Proportion married:", prop_married, "\n")
##############
# Part (d)
##############
prop_females <- mean(data$gender == 0, na.rm = TRUE)
cat("Proportion females:", prop_females, "\n")
##############
# Part (e)
##############
total_observations <- nrow(data)
total_nas <- sum(is.na(data))
cat("Total observations:", total_observations, "\n")
cat("Total NAs:", total_nas, "\n")
##############
# Part (f)
##############
# Convert "income" column to a factor
data$income <- as.factor(data$income)
#################
# Question (iv)
#################
##############
# Part (a)
##############
#################
# Question (v)
#################
##############
# Part (b)
##############
library(caret)
lambda_grid <- 10^(seq(5, -2, length = 50))
lasso_model <- train(
income ~ .,
data = train_data,
method = "glmnet",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(alpha = 1, lambda = lambda_grid)
)
list()
train_index <- createDataPartition(data$income, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
rf_models <- list()
tree_counts <- c(100, 200, 300)
for (trees in tree_counts) {
rf_models[[as.character(trees)]] <- train(
income ~ .,
data = train_data,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = c(2, 5, 9), ntree = trees)
)
}
best_rf_model <- rf_models[[which.max(sapply(rf_models, function(x) max(x$results$Accuracy)))]]
for (trees in tree_counts) {
set.seed(123)  # Ensure reproducibility
rf_models[[as.character(trees)]] <- train(
income ~ .,
data = train_data,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = expand.grid(mtry = c(2, 5, 9)),  # Only specify mtry
ntree = trees  # Set number of trees here
)
}
